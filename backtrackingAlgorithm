public static bool SolveSudoku(int[,] sudoku, int row, int column)
        {
        bool filled = true;
        // checking for each index if it is 0
        for (int i = 0; i < 9; i++){
            for (int j = 0; j < 9; j++){
                //if index is 0, then set row and column to that index and filled is false
                if (sudoku[i, j] == 0){
                    column = j; row = i;
                    filled = false;
                    break;
                }
            }
            if (!filled) break;
        }
        if (filled) return true;
        //size of rows and columns
        for (int i = 1; i <= 9; i++){
            //if constraints pass, index is equal to number in for loop
            if (RowConstraint(sudoku, row, i) && ColConstraint(sudoku, column, i) && SubSquareConstraint(sudoku, row, column, i))
            {
                //if constraints pass, then number added to index
                sudoku[row, column] = i;
                if (SolveSudoku(sudoku, row, column)) return true;
                //if constraints don't pass, set index to 0 and go again with new number.
                else sudoku[row, column] = 0;
            }
        }
        return false;
    }
